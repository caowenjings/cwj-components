// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { getRouteMetaById } from './exports';
import deepmerge from '/Users/caowenjing/Documents/React练习/组件库/cwj-components-docs/node_modules/deepmerge';
import { warning } from '/Users/caowenjing/Documents/React练习/组件库/cwj-components-docs/node_modules/rc-util';

// Proxy do not warning since `Object.keys` will get nothing to loop
function wrapEmpty(meta, fieldName, defaultValue) {
  Object.defineProperty(meta, fieldName, {
    get: () => {
      warning(
        false,
        `'${fieldName}' return empty in latest version, please use \`useRouteMeta\` instead.`,
      );
      return defaultValue;
    },
  });
}

export const patchRoutes = ({ routes }) => {
  Object.values(routes).forEach((route) => {
    const routeMeta = getRouteMetaById(route.id, { syncOnly: true });

    if (routeMeta) {
      if (
        process.env.NODE_ENV === 'production' &&
        (route.meta?.frontmatter?.debug || routeMeta.debug)
      ) {
        // hide route in production which set hide frontmatter
        delete routes[route.id];
      } else {
        // merge meta to route object
        route.meta = deepmerge(route.meta, routeMeta);

        wrapEmpty(route.meta, 'toc', []);
        wrapEmpty(route.meta, 'texts', []);

        route.meta.tabs?.forEach((tab) => {
          wrapEmpty(tab, 'toc', []);
          wrapEmpty(tab, 'texts', []);
        });
      }
    }
  });
};
